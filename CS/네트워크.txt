# 네트워크 개념 한마디로 비유적으로 요약하기

다른 사람들은 모르겠지만, 공부할 때 내 원칙은 어려운 개념이 어렵게 정리되면 안된다는 거임. 비록 그게 사실이랑 조금 다를 수는 있어도…처음 공부할 때는 정말 쉽게 딱 한마디로 그래서 그게 뭔데?에 대해서 한 문장으로 답을 할 수가 있어야함. (나의 경우엔 그게 비유일 때 훨씬 쉽고 명료하게 rough한 개념을 이해할 수 있었음)
그리고, 조금 더 나아가서는 한마디로 그게 뭔데?에 대해 답을 할 수 있다면 구체적인 각론으로 2가지 질문에 대해서 간단하고 명료하게 설명할 수 있어야함. 
그 각 개념들이 어떤 문제를 해결하려고 나온 것인지?(Problem - Solution) / 이를 어떻게 구현하는지(문법적으로 혹은 코드 상)  에 대해서 계속 업데이트할 생각임.
그래서 막 엄청 뭔가를 깔끔하게 정리하려고 하기보다는 그냥 핵심만 딱따 메모장으로 적어보자구...

```
1. 패킷과 JSON
JSON과 패킷은 서로 다른 개념이지만, 웹 애플리케이션에서는 JSON 데이터를 패킷 단위로 전송하고 수신하는 것이 일반적임.
패킷
패킷은 택배상자같은 거야. JSON 데이터들을 모은 것이 패킷이라고 생각해도 현대 웹에서는 문제가 없어.
```

```
2. 게이트웨이
게이트웨이는 문지기야. 문지기인데 외부망과 내부망(로컬호스트)로 들어오고 나가는 데이터 패킷(택배상자 꾸러미)를 검사해. 보안지킴이.
```

```
3. TCP/ IP
TCP/IP는 무형의 broad한 개념이야. 한마디로 말해서, TCP/IP도 우체국의 매뉴얼 원칙 조금 더 크게는 우체국 그 자체라고 생각해면 된다. 데이터들 꾸러미(패킷)을 어떻게 보낼지를 정의해둔 규칙도 있지. (이건 느낌 딱 오지만...우체국 (라우터)랑 연관이 깊어보이지?) 
```

```
4. Router = 행선지를 정해주는 우체국. (서버로 보낼지…post DB에 넣자.. get..Web에서 가져오자… 등등) 
```


## 리액트에 정리된 내용
```
내 생각엔… 이번 백현숙 선생님의 강의에서 내 나름대로 정리한 요점은...

1. Router = 행선지를 정해주는 우체국. (서버로 보낼지…post DB에 넣자.. get..Web에서 가져오자… 등등) 
2. ajax (React에선 axios라고 부름. 정확하겐 axios가 리액트에서 ajax 라이브러이이니깐 ajax가 더 broad한 개념) 
= ajax는 우체부. 데이터가 담긴 JSON을 들고 웹으로 가거나 서버로 가거나
3. JSON = 택배상자 (모양이 Map임. {Key: Value} ) 
따라서, JSON 자체는 그냥 데이터를 담는 그릇. 택배상자일 뿐임. 
4. 비동기 = 새로고침 안해도 웹에 정보가 뜸! 
5. async = 비동기붙일 수 있고, async가 있음 await가 따라다님…
6. CORS = 네이버 포털에서 카카오 포털 서버로 ajax 우체부를 보낼 수는 없음. 
하지만, 방구석 여포 개발자는 cors가 필요없으니(localhost) 로컬에서는 다 허용해줘도 됨. 
7. 가장 중요한데 헛갈리는 우체부!!! 어려운 우체부!! ajax는 어떻게 사용하지?
<최종정리 = 아래 사례 읽어보고 이렇게 기억>
1. 3단구조 만들면 됨!!
ajax.성공.실패
제이쿼리 : ajax.done.fail
리액트 : async function{ await axios.메소드().then.catch }

7-1.기본틀1. 제이쿼리에선...  ==> ajax.done.fail 3단구조!!
정리하자면, 제이쿼리는 script 태그에 
document.ready해주고, $.ajax().done().fail()
<script>
    $(document).ready(()=>{
        $("#btnAdd").click(()=>{
            $.ajax({
                url : "/ajax/add",
                data : {"x":$("x").val(), "y":$("y").val()}
                dataType : "json" 
//결과는 JSON 형태로 반환받겠습니다. 
            })  //url과 data는 이미 정햊니...JSON 형태임..
            .done((res,status,error)=>{
               $("#result").val(res.result);
            })// ajax가 배달에 성공했어!(코드 : 300)
				// (서버와 통신이 성공하여 데이터를 가져왔을 때)
            .fail((res,status,error)=>{
                console.log(status); // 왜 에러가 났는지를 확인해봄. 
            })// ajax가 배달에 실팼어!!(코드 : 400번대 / 500번대)
// 400번대 : 서버문제임 500번대 : 문법틀렸을 가능성이 높음(오타)
//(서버와 통신이 실패하여 데이터를 가지고 오지 못했을 때 )
        })  
    })
</script>


7- 기본틀2. 그렇다면 리액트에선? ==> async 함수 안 3단구조
정리하자면, async 함수 안에 axios.메소드(url).then(res->).catch(error->) 이렇게 씀
    async function loadData(){
      const url = serverIP + "/hero/list";
      await axios.get(url)
      .then((res)=>{
        setBoardList(res.data);
        setLoading(true);
      })
      .catch((error)=>{
        console.log(error);
      })

8. 택배상자 JSON은 어떻게 쓰는 거야?
<딱 한마디로 정리하자면>
배열이 Map을 감싸고 있고, JSON이라는 택배상자를 열려면 열쇠(Key)가 필요해.
말 그대로 Key값. (백엔드에서 Key값을 찾아야지)
[{}]
이 구조라는 것을 기억해...!
배열이 Map을 감싸고 있다고...! 
그래서...가끔 이런 경우가 있어.. 분명 데이터를 나는 가져왔는데 그것도 하나밖에 안되는데! 왜 두번 depth를 들어가야할까?
     
setHeroName(results.data.hero.hero_name);

이렇게 말야...! 내 생각엔 data.hero_name으로 끝날 거 같은데
그 이유는 보통 우리가 데이터를 보낼 때
 		 res.render("board/board_view", { hero : heroItem });
이런식으로 JSON 형태로 보내기 때문이야.
data 의 형태는 배열로 되어있지만, 우리는 배열을 깠지만 JSON이라는 택배상자가 남아있단 말야. JSON 택배상자를 까기 위한 방법은 열쇠가 필요함 (Key값)
여기에선 Key값이 hero라고 지정되어있으니...! hero라는 열쇠로 열어야해.

8.(지엽) 3항연산자를 쓸 때도 있는 듯. 근데 이것도 결국은 
ajax.성공.실패 3단구조랑 똑같음!
```
